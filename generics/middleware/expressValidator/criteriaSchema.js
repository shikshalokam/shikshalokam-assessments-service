module.exports = (req) => {

    let criteria = {

        insert: function () {
            req.check('externalId').exists().withMessage("required external id")
            req.check('owner').exists().withMessage("required owner")
            req.check('timesUsed').exists().withMessage("required time usage")
            req.check('weightage').exists().withMessage("required weightage")
            req.check('remarks').exists().withMessage("required remarks")
            req.check('name').exists().withMessage("required name")
            req.check('description').exists().withMessage("required description")
            req.check('criteriaType').exists().withMessage("required criteria type")
            req.check('score').exists().withMessage("required score")
            req.check('resourceType').exists().withMessage("required resource type")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('language').exists().withMessage("required language")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('keywords').exists().withMessage("required keywords")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('concepts.*.identifier').exists().withMessage("required identifier")
            req.check('concepts.*.name').exists().withMessage("required name")
            req.check('concepts.*.objectType').exists().withMessage("required object type")
            req.check('concepts.*.relation').exists().withMessage("required relation")
            req.check('concepts.*.description').exists()
            req.check('concepts.*.index').exists()
            req.check('concepts.*.status').exists()
            req.check('concepts.*.depth').exists()
            req.check('concepts.*.mimeType').exists()
            req.check('concepts.*.visibility').exists()
            req.check('concepts.*.compatibilityLevel').exists()
            req.check('concepts.*.compatibilityLevel').exists()
            req.check('flag').exists()
            req.check('createdFor').exists()
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('rubric.levels.*.level').exists()
            req.check('rubric.levels.*.label').exists()
            req.check('rubric.levels.*.description').exists()
            req.check('rubric.levels.*.expression').exists()
            req.check('rubric.levels.*.expressionVariables').exists().withMessage("required expression variables")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('evidences').exists()
            .custom(value=> typeof(value)=="object").withMessage("invalid value")

        },
        
        addQuestion: function () {
            req.check('question').exists().withMessage("required question")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('externalId').exists().withMessage("required external id")
            req.check('parentId').exists().withMessage("required parent id")
            req.check('instanceParentId').exists().withMessage("required instance parent id")
            req.check('visibleIf.*.operator').exists().withMessage("required operator")
            req.check('visibleIf.*.value').exists().withMessage("required value")
            req.check('file.required').exists().withMessage("required required")
            .isBoolean().withMessage("invalid value")
            req.check('file.type').exists().withMessage("required type")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('file.minCount').exists().withMessage("required min count")
            req.check('file.maxCount').exists().withMessage("required max count")
            req.check('file.caption').exists().withMessage("required caption")
            .isBoolean().withMessage("invalid value")
            req.check('responseType').exists().withMessage("required response type")
            req.check('validation.required').exists().withMessage("required validation required")
            .isBoolean().withMessage("invalid value")
            req.check('children').exists().withMessage("required children")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('fileName').exists().withMessage("required fileName")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('showRemarks').exists().withMessage("required show remarks")
            .isBoolean().withMessage("invalid value")
            req.check('isCompleted').exists().withMessage("required is completed")
            .isBoolean().withMessage("invalid value")
            req.check('remarks').exists().withMessage("required remarks")
            req.check('value').exists().withMessage("required value")
            req.check('canBeNotApplicable').exists().withMessage("required can not applicable")
            .isBoolean().withMessage("invalid value")
            req.check('notApplicable').exists().withMessage("required not applicable")
            req.check('usedForScoring').exists().withMessage("required used for scoring")
            req.check('modeOfCollection').exists().withMessage("required mode of collection")
            req.check('questionType').exists().withMessage("required question type")
            req.check('questionGroup').exists().withMessage("required question group")
            .custom(value=> typeof(value)=="object").withMessage("invalid value")
            req.check('accessibility').exists().withMessage("required accessibility")
            req.check('payload.criteriaId').exists().withMessage("required criteria id")
            req.check('payload.evidenceId').exists().withMessage("required evidence id")
            req.check('payload.section').exists().withMessage("required section")
        }
        
    }

    if (criteria[req.params.method]) criteria[req.params.method]();
    
};